syntax = "proto3";

package conscious.v1;

// Import standard types
import "google/protobuf/timestamp.proto";
import "google/protobuf/struct.proto"; // For flexible config structures
import "google/protobuf/empty.proto"; // For requests/responses with no parameters

// --- Find Service ---

message FindThoughtsRequest {
  string text = 1;
  string type = 2;
  map<string, string> identifiers = 3;
}

message FindThoughtsResponse {
  repeated string thoughts = 1;
}

service FindService {
  rpc FindThoughts(FindThoughtsRequest) returns (FindThoughtsResponse);
}

// --- Config Service ---

message GetConfigsRequest {
  string config_type = 1;
}

message GetConfigsResponse {
  // Using Struct to represent arbitrary JSON-like config data
  google.protobuf.Struct configs = 1;
}

service ConfigService {
  rpc GetConfigs(GetConfigsRequest) returns (GetConfigsResponse);
}

// --- Review Service ---

message ReviewCard {
    int64 thought_id = 1;
    string text = 2;
    // Add other relevant fields you might want to display
}

// Response for GetNextReviewCard. Includes the card if available.
message GetNextReviewCardResponse {
    // Indicates if a card was found and returned.
    // If false, the 'card' field should be ignored.
    bool card_available = 1;
    // The actual review card, only meaningful if card_available is true.
    ReviewCard card = 2;
}

message SubmitReviewGradeRequest {
  int64 thought_id = 1;
  int32 grade = 2; // FSRS uses 1 (Again), 2 (Hard), 3 (Good), 4 (Easy)
}

message ReviewUpdateResponse {
  string message = 1;
  google.protobuf.Timestamp next_due = 2; // Use Timestamp for dates
  string state = 3;
}

message DiscardThoughtRequest {
  int64 thought_id = 1;
}

message DiscardThoughtResponse {
  string message = 1;
  int64 id = 2;
}

service ReviewService {
  // Fetches the next thought due for review. Uses Empty request.
  rpc GetNextReviewCard(google.protobuf.Empty) returns (GetNextReviewCardResponse);

  // Submits a review grade for a specific thought.
  rpc SubmitReviewGrade(SubmitReviewGradeRequest) returns (ReviewUpdateResponse);

  // Discards a specific thought.
  rpc DiscardThought(DiscardThoughtRequest) returns (DiscardThoughtResponse);
}

// --- Health Check Service (Standard gRPC Health Checking Protocol) ---
// It's good practice to include this for production environments.

message HealthCheckRequest {
  string service = 1;
}

message HealthCheckResponse {
  enum ServingStatus {
    UNKNOWN = 0;
    SERVING = 1;
    NOT_SERVING = 2;
    SERVICE_UNKNOWN = 3; // Used only by the Watch method
  }
  ServingStatus status = 1;
}

service Health {
  rpc Check(HealthCheckRequest) returns (HealthCheckResponse);
  // Optional: rpc Watch(HealthCheckRequest) returns (stream HealthCheckResponse);
}