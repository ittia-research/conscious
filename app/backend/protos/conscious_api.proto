syntax = "proto3";

package conscious.v1;

// Import standard types
import "google/protobuf/timestamp.proto";
import "google/protobuf/struct.proto"; // For flexible config structures
import "google/protobuf/empty.proto"; // For requests/responses with no parameters

message Empty {}

// --- Find Service ---

message FindThoughtsRequest {
  string text = 1;
  string type = 2;
  map<string, string> identifiers = 3;
}

message FindThoughtsResponse {
  repeated string thoughts = 1;
}

service FindService {
  rpc FindThoughts(FindThoughtsRequest) returns (FindThoughtsResponse);
}

// --- Get Configs ---

message GetConfigsResponse {
  // Using Struct to represent arbitrary JSON-like config data
  google.protobuf.Struct sources = 1;
  google.protobuf.Struct tasks = 2;
}

service ConfigService {
  rpc GetConfigs(google.protobuf.Empty) returns (GetConfigsResponse);
}

// --- Review Service ---

message ReviewCard {
    int64 thought_id = 1;
    string text = 2;
    // Add other relevant fields you might want to display
}

// Request for GetNextReviewCards. Includes how many cards to fetch.
message GetNextReviewCardsRequest {
    // Number of cards requested. Server may return fewer if not enough are available.
    // Defaults to a reasonable number (e.g., 3) if not specified or zero.
    int32 count = 1;
}

// Response for GetNextReviewCards. Includes the list of cards found.
message GetNextReviewCardsResponse {
    // A list of review cards. Will be empty if no cards are available.
    repeated ReviewCard cards = 1;
}

message SubmitReviewGradeRequest {
  int64 thought_id = 1;
  int32 grade = 2; // FSRS uses 1 (Again), 2 (Hard), 3 (Good), 4 (Easy)
}

message ReviewUpdateResponse {
  string message = 1;
  google.protobuf.Timestamp next_due = 2; // Use Timestamp for dates
  string state = 3;
}

message DiscardThoughtRequest {
  int64 thought_id = 1;
}

message DiscardThoughtResponse {
  string message = 1;
  int64 id = 2;
}

service ReviewService {
  // Fetches the next batch of thoughts due for review.
  rpc GetNextReviewCards(GetNextReviewCardsRequest) returns (GetNextReviewCardsResponse);

  // Submits a review grade for a specific thought.
  rpc SubmitReviewGrade(SubmitReviewGradeRequest) returns (ReviewUpdateResponse);

  // Discards a specific thought.
  rpc DiscardThought(DiscardThoughtRequest) returns (DiscardThoughtResponse);
}

// --- Health Check Service (Standard gRPC Health Checking Protocol) ---
// It's good practice to include this for production environments.

message HealthCheckRequest {
  string service = 1;
}

message HealthCheckResponse {
  enum ServingStatus {
    UNKNOWN = 0;
    SERVING = 1;
    NOT_SERVING = 2;
    SERVICE_UNKNOWN = 3; // Used only by the Watch method
  }
  ServingStatus status = 1;
}

service Health {
  rpc Check(HealthCheckRequest) returns (HealthCheckResponse);
  // Optional: rpc Watch(HealthCheckRequest) returns (stream HealthCheckResponse);
}

// --- Add Service ---

message AddDataRequest {
  string task = 1;
  string source_type = 2;
  map<string, string> source_identifiers = 3;  // For key-value pairs like {"isbn": "..."}
  optional bytes file_content = 4;             // Use bytes for raw file data
  repeated string text_list = 5;               // List of text inputs
}

message AddDataResponse {
  bool success = 1;
  string message = 2;
}

service DataService {
  rpc AddData(AddDataRequest) returns (AddDataResponse);
}