
user  nginx;
worker_processes  auto;

error_log  /var/log/nginx/error.log notice;
pid        /var/run/nginx.pid;


events {
    worker_connections  1024;
}


http {
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    access_log  /var/log/nginx/access.log  main;

    sendfile        on;
    #tcp_nopush     on;

    keepalive_timeout  65;

    #gzip  on;

    # =================================================================
    # ==  Maps for Correct Forwarded Headers (Direct or Cloudflare)  ==
    # =================================================================

    # 1. Determine the FINAL protocol
    #    Priority: Incoming X-Forwarded-Proto (from Cloudflare), else Nginx's scheme
    map $http_x_forwarded_proto $final_forwarded_proto {
        default   $http_x_forwarded_proto; # Use header from proxy (Cloudflare) if present
        ""        $scheme;                 # Otherwise, use the scheme Nginx sees (http/https)
    }

    # 2. Determine the FINAL host
    #    Priority: Incoming X-Forwarded-Host (from Cloudflare), else Nginx's $host variable
    #    ($host usually contains the hostname part of the request)
    map $http_x_forwarded_host $final_forwarded_host {
        default   $http_x_forwarded_host;  # Use header from proxy (Cloudflare) if present
        ""        $host;                   # Otherwise, use Nginx's $host variable
    }

    # 3. Determine the FINAL port
    #    Priority:
    #      a. Incoming X-Forwarded-Port (from Cloudflare)
    #      b. Port specified in the Host header (e.g., domain:9080)
    #      c. Default port based on the FINAL protocol (https=443, http=80)

    #    Helper map: Default port based on the FINAL determined protocol
    map $final_forwarded_proto $default_port_for_proto {
        https     443;
        default   80;  # Default to 80 for http or unknown
    }

    #    Helper map: Extract port ONLY if present in Host header ($http_host)
    map $http_host $port_in_host_header {
        "~^[^:]+:(?<port_capture>\d+)$"    $port_capture; # Capture digits after colon
        default                            "";             # Default to empty string if no port
    }

    #    Combine the logic: Step 1 - Prioritize incoming header over host header port
    map $http_x_forwarded_port $port_step1 {
        default   $http_x_forwarded_port;  # Use incoming X-Forwarded-Port if set
        ""        $port_in_host_header;    # Else, use port extracted from Host header (if any)
    }

    #    Combine the logic: Step 2 - Use Step 1 result or fall back to protocol default
    map $port_step1 $final_forwarded_port {
        default   $port_step1;              # Use the port found in Step 1 (from header or Host) if present
        ""        $default_port_for_proto;  # Else (neither header nor Host provided port), use protocol default
    }

    # =================================================================
    # ==                         End of Maps                         ==
    # =================================================================

    include /etc/nginx/conf.d/*.conf;
}
