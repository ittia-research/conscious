services:

  # =====================================================================
  # ==                       Start Profile Prod                        ==
  # =====================================================================

  # PostgreSQL Database Production
  prod-database:
    image: ghcr.io/ittia-research/conscious:latest-database
    # build:
    #   context: ./app/database
    #   dockerfile: Dockerfile
    env_file:
      - ./infra/env.d/prod
      - ./infra/env.d/database
    volumes:
      - /data/volumes/conscious/postgres:/var/lib/postgresql/data
    # ports:
    #   - "5432:5432"
    shm_size: 1gb
    profiles: ["prod"]
    networks:
      - prod_network
    restart: unless-stopped

  # FastAPI Backend Production
  prod-backend:
    image: ghcr.io/ittia-research/conscious:latest-backend
    # build:
    #   context: ./app/backend
    #   dockerfile: Dockerfile
    env_file:
      - ./infra/env.d/prod
      - ./infra/env.d/ai
      - ./infra/env.d/backend
      - ./infra/env.d/database
      - ./infra/env.d/s3
      - ./infra/env.d/.private
    volumes:
      - /data/cache/conscious/dspy:/cache/dspy
    # ports:
    #   - "8000:8000"
    depends_on:
      - prod-database
      - minio
    profiles: ["prod"]
    networks:
      - prod_network
    restart: unless-stopped

  # SvelteKit Frontend Production
  prod-frontend:
    image: ghcr.io/ittia-research/conscious:latest-frontend
    # build:
    #   context: ./app/frontend
    #   dockerfile: Dockerfile
    env_file:
      - ./infra/env.d/prod
      - ./infra/env.d/backend
      - ./infra/env.d/frontend
      - ./infra/env.d/.private
    environment:
      # CSRF: tell SvelteKit about the request protocol and host, from which it can construct the origin URL
      # Reference: https://github.com/sveltejs/kit/blob/main/documentation/docs/25-build-and-deploy/40-adapter-node.md
      PROTOCOL_HEADER: x-forwarded-proto
      HOST_HEADER: x-forwarded-host
      PORT_HEADER: x-forwarded-port
    depends_on:
      - prod-backend
    profiles: ["prod"]
    networks:
      - prod_network
    restart: unless-stopped

  # Nginx Reverse Proxy Production
  prod-nginx:
    image: ghcr.io/ittia-research/conscious:latest-nginx
    # build:
    #   context: ./app/nginx
    #   dockerfile: Dockerfile
    ports:
      - '80:80'
    environment:
      # Used by the entrypoint script !IMPORTANT
      - FRONTEND_HOST=prod-frontend
    depends_on:
      - prod-frontend
    profiles: ["prod"]
    networks:
      - prod_network
    restart: unless-stopped


  # =====================================================================
  # ==                        Start Profile Dev                        ==
  # =====================================================================


  # PostgreSQL Database Development
  dev-database:
    build:
      context: ./app/database
      dockerfile: Dockerfile
    env_file:
      - ./infra/env.d/dev
      - ./infra/env.d/database
    volumes:
      - .data/postgres:/var/lib/postgresql/data
      # Initialization script(s), runs only on first creation
      - ./app/database/initdb.d:/docker-entrypoint-initdb.d
    ports:
      - "5432:5432"
    shm_size: 1gb
    profiles: ["dev"]
    networks:
      - dev_network
    restart: no

  # FastAPI Backend Development
  dev-backend:
    build:
      context: ./app/backend
      dockerfile: Dockerfile
    env_file:
      - ./infra/env.d/dev
      - ./infra/env.d/ai
      - ./infra/env.d/backend
      - ./infra/env.d/database
      - ./infra/env.d/s3
      - ./infra/env.d/.private
    volumes:
      - ./app/backend:/app
      - .data/cache/dspy:/cache/dspy
    ports:
      - "8000:8000"
    command: /bin/sh -c "
        cd /app
        && uvicorn main:app --host 0.0.0.0 --port 8000 --reload
      " # Add --reload for development
    depends_on:
      - dev-database
      - minio
    profiles: ["dev"]
    networks:
      - dev_network
    restart: no

  # SvelteKit Frontend Development
  dev-frontend:
    # Use Debian for development
    image: node:23-bookworm-slim
    ports:
      - "3000:3000"
    env_file:
      - ./infra/env.d/dev
      - ./infra/env.d/backend
      - ./infra/env.d/frontend
      - ./infra/env.d/.private
    volumes:
      # Mount local code to reload automatically during development,
      # and save installation files to local
      - ./app/frontend:/app
    command: /bin/sh -c "
        cd /app
        && npm install
        && npm run dev -- --host --port 3000
      "
    depends_on:
      - dev-backend
    profiles: ["dev"]
    networks:
      - dev_network
    restart: no

  # Nginx Reverse Proxy Development
  dev-nginx:
    build:
      context: ./app/nginx
      dockerfile: Dockerfile
    ports:
      - '80:80'
    volumes:
      # Mount Nginx config files read-only
      - ./app/nginx/default.template.conf:/etc/nginx/templates/default.template.conf:ro
      - ./app/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
    environment:
      # Used by the entrypoint script !IMPORTANT
      - FRONTEND_HOST=dev-frontend
    depends_on:
      - dev-frontend
    profiles: ["dev"]
    networks:
      - dev_network
    restart: no


  # =====================================================================
  # ==                       Start Profile Utils                       ==
  # =====================================================================


  # MinIO Object Storage
  minio:
    image: quay.io/minio/minio:RELEASE.2025-04-03T14-56-28Z
    command: server /data --console-address ":9001"
    ports:
      - '19000:9000'
      - '19001:9001'
    env_file:
      - ./infra/env.d/minio
      - ./infra/env.d/s3
      - ./infra/env.d/.private
    volumes:
      - /data/volumes/minio:/data
    healthcheck:
      test: ["CMD", "mc", "ready", "local"]
      interval: 5s
      timeout: 5s
      retries: 5
    profiles: ["dev", "prod"]
    networks:  # Available to both dev and prod
      - dev_network
      - prod_network
    restart: unless-stopped

  # Infinity inference server for embedding, rerank, etc.
  infinity:
    image: michaelf34/infinity:latest
    ports:
      - 7997:7997
    volumes:
      - /data/cache/huggingface:/cache/huggingface
    env_file:
      - ./infra/env.d/infinity
      - ./infra/env.d/huggingface
    command: ["v2"]
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: all
              capabilities: [gpu]
    profiles: ["utils"]
    networks:  # Available to both dev and prod
      - dev_network
      - prod_network
    restart: unless-stopped


networks:
  dev_network:
    driver: bridge
  prod_network:
    driver: bridge